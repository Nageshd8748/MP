1)swaping without reg program
PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			   
              EXPORT __main			 
; Start of CODE area 
__main 	
			LDR	R0,=0XF631024C
			LDR	R1,=0X17539ABD
			EORS	R0,R0,R1			;R0^R1
			EORS	R1,R0,R1			;R1^R0
			EORS	R0,R0,R1			;R0^R1

stop	      B	   stop		 		;stop program
	          END	
	   	
2)memory swap overview
	PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			   
              EXPORT __main			 
; Start of CODE area 

__main  	
			
			
	LDR r0,=0x20000100 ; Source address
 	LDR r1,=0x20000200 ; Destination address
	LDR r2, =2 ; number of bytes to copy
copy_loop
	LDRB r3, [r0] ; read 1 byte
	LDRB r4, [r1]
	STRB r3, [r1]
	STRB r4, [r0]
	ADDS r0, r0, #1 ; increment source pointer
	
	ADDS r1, r1, #1 ; increment destination pointer
	SUBS r2, r2, #1 ; decrement loop counter
	BNE copy_loop ; loop until all data copied

stop  B   stop
     END
3)
  PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY
	EXPORT __main
__main
	LDR R0, =2
	CMP R0, #3
	BHI default_case
	MOVS R1, #4
	MULS R0, R1, R0
	LDR R2, =branch_table
	LDR R1, [R2, R0]
	BX R1
	ALIGN 4
branch_table
	DCD dest0
	DCD dest1
	DCD dest2
	DCD dest3

dest0
	LDR R0, =0
	B next
dest1
	LDR R0, =1
	B next
dest2
	LDR R0, =2
	B next
dest3
	LDR R0, =3
	B next
default_case
	LDR R0, =4
next
stop B stop
  END

	
4)bit clear pgm
	PRESERVE8;
	THUMB
	AREA |.text|, CODE, READONLY
	EXPORT __main
__main
	LDR R0, =0xABCDEF01
	MOVS R1, #15
	MOVS R2, #4
	MOVS R3, #13
	RORS R0, R0, R1
	LSRS R0, R0, R2
	RORS R0, R0, R3
	NOP
	END
 5)bit extract pgm
  	PRESERVE8;
	THUMB;
	AREA |.text|, CODE, READONLY
	
	EXPORT __main
__main
	LDR R0, =0xABCDEF01
	MOV R1, R0
	LSLS R0, R0, #6
	LSRS R0, R0, #30
	NOP
	END
6) expression pgm
    PRESERVE8;
	THUMB;
	AREA |.text|, CODE, READONLY
	
	EXPORT __main
__main
           LDR R0,=0x02
           MOVS R1, R0
	   MOVS R2, #3
	   MULS R0, R1, R0
	   MULS R0, R1, R0
	   MULS R2, R1,R2
           ADDS	R0,R0,R2   
           ADDS	R0,R0,#3
stop B  stop
	  END
7) function caller
        PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY

	EXPORT __main
	EXTERN func
__main
	BL func
	NOP
	END
function1 pgm
   PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY

	EXPORT func
	EXTERN func2
func
	PUSH {LR}
	MOVS R0, #5
	SUBS R0,R0,#2
	BL func2
	POP {PC}
	END
function2
           PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY

	EXPORT func2

func2
	MOVS R1, #1
	MOVS R2, #3
	ADDS R0,R2,R1
	BX LR
	END
	
